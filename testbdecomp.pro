;____________________________________
;
; Claire Lackner
;  Jan 20 2010
;
;  fitStandards.pro
;
;  fits a set of fake galaxy images, as generated by pythons fake
;  galaxy code
; 
;____________________________________


PRO testbdecomp, path, file, outfile, startGal, endGal

fakes=mrdfits(path+file,1,/silent,range=[startGal,endGal-1])
numGal = n_elements(fakes)

psf = 3.8
fit_range = [5.0, 3.0, 2.0, 1.5, 1.0, 0.75]
nfits = 6
outputentry = { NUM:0L, TYPE:'sersicordisk', XDIM:0, YDIM:0, $
                bulgeparameters:dblarr(8), diskparameters:dblarr(8), $
                FITRANGE:fit_range, NORM:dblarr(nfits+1), SERSIC_N:dblarr(nfits+1), $
                R50:dblarr(nfits+1), ELLIP:dblarr(nfits+1), C:dblarr(nfits+1), $
                XCEN:dblarr(nfits+1), YCEN:dblarr(nfits+1), PHI:dblarr(nfits+1), $
                CHI_SQUARE:dblarr(nfits+1), DOF:dblarr(nfits+1), $
                PSF_FWHM:3.8, BULGEFIT:dblarr(8), DISKFIT:dblarr(8) }
output = replicate( outputentry, n_elements(fakes) )

output.TYPE = fakes.TYPE
output.NUM = indgen(numGal)+startGal

output.bulgeparameters = fakes.bulgeparameters
output.diskparameters = fakes.diskparameters

val = 0

for i=0, numGal-1 do begin

    print, 'gal num ', i+startGal,': ',i,' of ',numGal
    filename = path+'/'+fakes[i].TYPE+string(i+startGal, format='(i05)')+'.fits'

;    print, 'disk:  ', fakes[i].diskparameters
;    print, 'bulge: ', fakes[i].bulgeparameters
    image = mrdfits( filename, /silent )
    x = (size(image, /dimensions))[0]
    y = (size(image, /dimensions))[1]
    makegrid,x,y,xx,yy
    
    diskbulgefit, dbparams, bbparams, image, psf, [-1.0], chsqdb, bulgeSersic=4.0
    diskbulgefit, doparams, diparams, image, psf, [-1.], chsqdd, bulgeSersic=1.0

;    print, dbparams
;    print, bparams
    print, 'exp + dvC'
    print, chsqdb
    print, 'exp + exp'
    print, chsqdd


    if( chsqdb lt chsqdd ) then begin
        dparams = dbparams
        bparams = bbparams
    endif else begin
        dparams = doparams
        bparams = diparams
    endelse
        
    if( dparams[0] lt 1.0e-5 or dparams[1] lt 1.0e-5 ) then subtractImage = image $
      else $
      subtractImage = image - pixelfluxpsf( xx,yy,dparams, $
                                            _EXTRA={psfImage:makepsf(x,y,psf)})

        
    fitImage, val, fit_range, subtractImage, psf

    output[i].XDIM = x
    output[i].YDIM = y
    
    output[i].NORM = val[*,0]
    output[i].SERSIC_N = val[*,2]
    output[i].R50 = val[*,1]
    output[i].ELLIP = val[*,3]
    output[i].C = val[*,4]
    output[i].XCEN = val[*,5]
    output[i].YCEN = val[*,6]
    output[i].PHI = val[*,7]
    output[i].CHI_SQUARE=val[*,9]
    output[i].DOF=val[*,10]
    output[i].BULGEFIT = bparams
    output[i].DISKFIT = dparams

endfor

mwrfits, output, outfile

END
